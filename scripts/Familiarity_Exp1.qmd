---
title: "data_analysis"
author: "Chenyu Li"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

# 1 Initial setting

## 1.1 clear workspacce and set default color

```{r reset, include=FALSE}
graphics.off()
rm(list=ls(all.names=TRUE))
options(digits = 3)

options(ggplot2.discrete.colour= c("#615F63","#FF7F6F","#2F7FC1","#FFBE7A","#8FC0A9","#8A1C56"))
options(ggplot2.discrete.fill= c("#615F63","#FF7F6F","#2F7FC1","#FFBE7A","#8FC0A9","#8A1C56"))
```

## 1.2 Packages, theme setting and path

```{r primary setting, include=FALSE}

# package list
packages = c("tidyverse", "brms","ggpubr", "smartr","tidybayes","emmeans","bayestestR")
# get the package names that are not installed
missing_packages <- setdiff(packages, rownames(installed.packages()))
# install the missing packages
if (length(missing_packages) > 0) install.packages(missing_packages)
# library package
suppressMessages(sapply(packages, library, character.only = TRUE))


# import private functions (do not print the output)
nothing <- sapply(list.files("./functions", pattern = "*.R", full.names = TRUE), source)

# theme
theme_set(theme_bw())
dodge1 = position_dodge(.1)
dodge2 = position_dodge(.2)
dodge3 = position_dodge(.3)
dodge4 = position_dodge(.4)

# task name
task <- "Exp1"
model_path <- str_glue("./models/Model-{task}/Models/")
sample_path <- str_glue("./models/Model-{task}/Sample/")
figure_path <- str_glue("./figures/figures-{task}/")
log_path <- "./models/"
bf_path = "./models/BayesFactor/"

# check whether the folders are existent or not. If not, create a new one
dir.create(file.path(model_path), showWarnings = FALSE)
dir.create(file.path(sample_path), showWarnings = FALSE)
dir.create(file.path(figure_path), showWarnings = FALSE)

```


# 2 Data processing

## 2.1 Import data

```{r}

# Import Response data
Raw_Res <- str_glue("./data/Data_{task}_Res.csv") %>% read_csv()

# Category and count response
Data_Res <- Raw_Res %>% 
  filter(screenID == "retrieval") %>% 
  mutate(
    participant = factor(participant),
    condition = factor(condition)) %>% 
  classifyRes(groupLevel = c("participant", "block", "trial"))

# Import Survey data
Data_Survey <- str_glue("./data/Data_{task}_Survey.csv") %>% read_csv()

```

## 2.2 Data cleaning

```{r}

excluding_list = Data_Survey %>% 
  filter(str_detect(attention,"是"), korean_question != "从未") %>% 
  pull(participant)

Data_Res <- Data_Res %>% 
  filter(!participant %in% excluding_list)

str_glue("{length(excluding_list)} participants are excluded from the analysis.") %>% message()

```

## 2.3 Create a table for the number of options

```{r}

# Create a table for the number of options
Table_nOptions <- data.frame(
  updPos = c("yes","no")) %>% 
  mutate(nCorrect = 1,
         nTransOld = ifelse(updPos=="yes" , 3, 2),
         nTransNew = case_when(
           updPos=="yes" ~ 2,
           updPos=="no" ~ 3),
         nOutSame = ifelse(updPos=="yes", 1, 1e-4),
         nOutOther = case_when(
           updPos=="yes" ~ 2, 
           updPos=="no" ~ 3),
         nNPL = 6)

# Re-frame the table
Columns_nOptions <- Table_nOptions %>% 
  pivot_longer(cols = starts_with("n"), names_to ="response", values_to = "nOpt") %>% 
  mutate(response = substring(response, 2))

# Save it for drawing the figure
write_csv(Columns_nOptions, str_glue("./figures/figures-Data/Data_{task}_nOptions.csv"))
```

# 3 Ploting data

## 3.1 Data and data transform

```{r}

Table_response <- Data_Res %>% 
  select(
    participant, condition, ends_with("New"), 
    ends_with("Old"), starts_with("Out"), NPL, NoRes) %>% 
  pivot_longer(
    cols = c(ends_with("New"), ends_with("Old"), starts_with("Out"),NPL, NoRes), 
    names_to = "response", values_to = "value") %>% 
  summarySE(DV = value, within = c("condition"), between = c("response"), group = "participant") %>% 
  mutate( 
    condition = factor(
      condition, 
      levels = c("cn","kr"), 
      labels = c("Familiar (Chinese)", "Unfamiliar (Korean)")),
    # correct error bar
    upper = ifelse(abs(mean) < 1e-5, 0, mean + ci),
    lower = ifelse(abs(mean) < 1e-5, 0, mean - ci)) %>% 
  select(!c(ci,se,n))

```


## 3.2 Plot (Accuracy)

```{r}
(
  Plot_Res_Correct <- Table_response %>% 
    filter(str_detect(response,"Correct")) %>%
    mutate(
      response = factor(
        response, 
        levels = c("CorrectOld","CorrectNew"), 
        labels = c("Origianl items","New items"))
    ) %>% 
    ggplot(aes(x = response, y = mean, color = condition))+
    geom_point(position = dodge2)+
    geom_errorbar(aes(ymax = upper, ymin = lower),position = dodge2, width = 0.1)+
    ylim(0,1)+
    labs(
      x = "Item type", y = "Proportion of correct", 
      color = "Condition")+
    theme(
      # legend.position = "None",
      title = element_text(size = 11),
      axis.text = element_text(size = 10.5))
)

ggsave(
  plot = Plot_Res_Correct,
  path = figure_path,
  filename = "Plot_Res_Correct.pdf",
  width = 6.5, height = 5
)

```


# Model fit

## Response

### Data and data arguments

```{r}

# Data -------------------------------------------------------------------------

mData_Res <- Data_Res %>% 
  pivot_longer(
    cols = c(CorrectNew, CorrectOld, TransNew, TransOld, OutSame, OutOther, NPL),
    names_to = "category",
    values_to = "value"
  ) %>%
  summarize(
    Resp = sum(value, na.rm = TRUE),
    nResp = sum(!is.na(value)),
    .by = c(participant, condition, category)
  ) %>% 
  mutate(
    itemType = case_when(
      str_detect(category, "Old") ~ "Original",
      str_detect(category, "New") ~ "New",
      str_detect(category, "Out") ~ "Outdated",
      TRUE ~ "NPL"),
    response = case_when(
      str_detect(category, "Correct|Same") ~ "correct",
      TRUE ~ "incorrect")
    )

contrasts(mData_Res$condition) = bayestestR::contr.equalprior(n = 2)

# Arguments --------------------------------------------------------------------

Args_response <- list(
  formula = Resp | trials(nResp) ~ 1 + condition*itemType + (1 + condition*itemType || participant),
  family = binomial(),
  prior = c(prior(normal(0,1), class = "b"), 
            prior(student_t(3, 0, 2), class = "sd", lb = 0)),
  chains = 8,
  iter = 10000,
  warmup = 2500,
  cores = 8,
  control = list(adapt_delta = 0.95, max_treedepth = 15),
  save_pars = save_pars(all = TRUE)
)

```

### Correct responses

```{r}

mData_Res_Correct <- mData_Res %>% 
  filter(response == "correct",itemType %in% c("Original","New")) %>% 
  mutate(itemType = factor(itemType))

contrasts(mData_Res_Correct$itemType) = bayestestR::contr.equalprior(n = 2)

smart_runFun(
  fun = brm,
  args = Args_response %>% append(list(
      data = mData_Res_Correct,
      file = str_glue("{model_path}Model_Exp1_Correct.rds"))),
  untilFinished = FALSE,
  name = "Model_Exp1_Correct",
)


Model_Correct <- readRDS(str_glue("{model_path}Model_Exp1_Correct.rds"))
smart_runFun(
  fun = unupdate,
  args = list(model = Model_Correct),
  untilFinished = TRUE,
  export = "Prior_Correct"
)
pairwise_comparisons(
  Model_Correct, 
  Prior_Correct, 
  c("~ condition","~ condition | itemType","~ itemType | condition"))



'
Parameter |       BF
--------------------
cn - kr   | 4.00e+14

Parameter        |       BF
---------------------------
cn - kr New      | 1.02e+08
cn - kr Original | 2.49e+18

Parameter         |       BF
----------------------------
New - Original cn |    0.515
New - Original kr | 2.74e+03
'


```


## Memory Measurement Model

## 4.1 Data and data transform

```{r}

mData_M3 <- Data_Res %>% 
  tidy_M3(
    responses = c("Correct", "TransOld", "TransNew", "OutSame", "OutOther", "NPL"),
    group = c("participant", "condition", "updPos"),
    DV_name = "y",
    nDV_name = "nRet",
    DV_numerical = TRUE
  ) %>% 
  left_join(Table_nOptions, by = "updPos") %>% 
  mutate(
    iP = ifelse(updPos == "yes", 1, 0),
  ) %>% 
  select(-updPos)

```


## 4.2 Function

```{r}

genM3Form <- function(choice_rule="softmax") {
  
  if (choice_rule=="softmax") {
    
    M3_formula <- bf(
      y | trials(nRet) ~ Correct + log(nCorrect),
      nlf(mu2 ~ TransOld + log(nTransOld)),
      nlf(mu3 ~ TransNew + log(nTransNew)),
      nlf(mu4 ~ OutSame + log(nOutSame)),
      nlf(mu5 ~ OutOther + log(nOutOther)),
      nlf(mu6 ~ NPL + log(nNPL)),
      nlf(Correct ~ (1-iP)*(a1 + c1) + iP*(a2 + c2) + b),
      nlf(TransOld ~ a1 + b),
      nlf(TransNew ~ a2 + b),
      nlf(OutSame ~ iP*(inv_logit(ra)*a1 + inv_logit(rc)*c1 + b) + (1-iP)*(-100)),
      nlf(OutOther ~ inv_logit(ra)*a1 + b),
      nlf(NPL ~ b),
      a1 ~ 0 + condition + (0 + condition || participant),
      c1 ~ 0 + condition + (0 + condition || participant),
      a2 ~ 0 + condition + (0 + condition || participant),
      c2 ~ 0 + condition + (0 + condition || participant),
      ra ~ 0 + condition + (0 + condition || participant),
      rc ~ 0 + condition + (0 + condition || participant),
      b ~ 1,
      nl = TRUE
    )
  } else {
    
    M3_formula <- bf(
      y | trials(nRet) ~ log(Correct*nCorrect),
      nlf(mu2 ~ log(TransOld*nTransOld)),
      nlf(mu3 ~ log(TransNew*nTransNew)),
      nlf(mu4 ~ log(OutSame*nOutSame)),
      nlf(mu5 ~ log(OutOther*nOutOther)),
      nlf(mu6 ~ log(NPL*nNPL)),
      nlf(Correct ~ (1-iP)*(exp(a1) + exp(c1)) + iP*(exp(a2) + exp(c2)) + b),
      nlf(TransOld ~ exp(a1) + b),
      nlf(TransNew ~ exp(a2) + b),
      nlf(OutSame ~ iP*(inv_logit(ra)*exp(a1) + inv_logit(rc)*exp(c1) + b) + exp(-100)),
      nlf(OutOther ~ inv_logit(ra)*exp(a1) + b),
      nlf(NPL ~ b),
      a1 ~ 0 + condition + (0 + condition || participant),
      c1 ~ 0 + condition + (0 + condition || participant),
      a2 ~ 0 + condition + (0 + condition || participant),
      c2 ~ 0 + condition + (0 + condition || participant),
      ra ~ 0 + condition + (0 + condition || participant),
      rc ~ 0 + condition + (0 + condition || participant),
      b ~ 1,
      nl = TRUE
    )
  }
  
  return (M3_formula)
}

genM3Prior <- function(choice_rule="softmax") {
  
  if (choice_rule=="softmax") {
    M3_prior <- c(
      prior(normal(3,1), class = "b", nlpar = "a1"),
      prior(normal(3,1), class = "b", nlpar = "c1"),
      prior(normal(3,1), class = "b", nlpar = "a2"),
      prior(normal(3,1), class = "b", nlpar = "c2"),
      prior(normal(0,1), class = "b", nlpar = "ra"),
      prior(normal(0,1), class = "b", nlpar = "rc"),
      prior(constant(0), class = "b", nlpar = "b")
      )
  } else {
    M3_prior <- c(
      prior(normal(1.5,0.5), class = "b", nlpar = "a1"), 
      prior(normal(1.5,0.5), class = "b", nlpar = "c1"),
      prior(normal(1.5,0.5), class = "b", nlpar = "a2"),
      prior(normal(1.5,0.5), class = "b", nlpar = "c2"),
      prior(normal(1.5,0.5), class = "b", nlpar = "ra"),
      prior(normal(1.5,0.5), class = "b", nlpar = "rc"),
      prior(constant(0.1), class = "b", nlpar = "b")
      )
  }
  
  return(M3_prior)
}

```


## 4.3 Model comparison

```{r}

# softmax

smart_runFun(
  fun = brm,
  args = list(
    formula = genM3Form(choice_rule = "softmax"),
    data = mData_M3,
    family = multinomial(refcat = NA),
    prior = genM3Prior(choice_rule = "softmax"),
    chains = 8,
    cores = 8,
    iter = 10000,
    warmup = 2500,
    control = list(adapt_delta = 0.95),
    save_pars = save_pars(all = TRUE),
    sample_prior = "yes",
    init = 0,
    file = paste0(model_path, "Model_Exp1_M3_Softmax_Int")
    ),
  name = "Model_Exp1_M3_Softmax_Int"
)


# luce choice rule

smart_runFun(
  fun = brm,
  args = list(
    formula = genM3Form(choice_rule = "luce"),
    data = mData_M3,
    family = multinomial(refcat = NA),
    prior = genM3Prior(choice_rule = "luce"),
    chains = 8,
    cores = 8,
    iter = 10000,
    warmup = 2500,
    control = list(adapt_delta = 0.95),
    save_pars = save_pars(all = TRUE),
    sample_prior = "yes",
    init = 0.1,
    file = paste0(model_path, "Model_Exp1_M3_Luce")
    ),
  name = "Model_Exp1_M3_Luce"
)

```


## 4.4 Bayes factor
```{r}

Model_M3 <- read_rds(str_glue("{model_path}Model_Exp1_M3_Softmax_noInt.rds"))

Hypothesis <- hypothesis(Model_M3, c(
  a1 = "a1_conditionkr = a1_conditioncn",
  c1 = "c1_conditionkr = c1_conditioncn",
  a2 = "a2_conditionkr = a2_conditioncn",
  c2 = "c2_conditionkr = c2_conditioncn",
  
  ra = "ra_conditionkr = ra_conditioncn",
  rc = "rc_conditionkr = rc_conditioncn"
  
))

Hypothesis$hypothesis %>% mutate(Evid.Ratio = 1/Evid.Ratio)

plot(Hypothesis)

'
Bayes factor is the column Evid.Ratio
Value larger than 1: evidence supporting a difference. 
Value smaller than 1: evidence supporting no difference.

  Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star
1   a1_a2_cn  -0.7082    0.1497   -1.005  -0.4154   2.11e+04  4.74e-05    *
2   a1_a2_kr  -0.0507    0.0758   -0.201   0.0983   6.81e-02  9.36e-01     
3         ra   2.9905    1.0500    0.841   5.0115   2.83e+01  3.42e-02    *
4         rc  -0.9985    0.5581   -2.159   0.0680   2.40e+00  2.94e-01     
'


```


## 4.5 Posterior

```{r}

Table_condition <- data.frame(
  condition = rep(c("cn","kr"),times = 2),
  formCond = c(
    "cn","kr",
    "Intercept","Intercept")) %>% 
  mutate(condition = factor(condition))


# Model fit
Model_M3 <- read_rds(str_glue("{model_path}Model_Exp1_M3_a2free_rafree.rds"))

Post_M3 <- Model_M3 %>% 
  gather_draws(`b_.*`, regex = TRUE) %>% 
  separate_wider_delim(.variable, "_", names = c(NA, "par","effect"), cols_remove = TRUE) %>% 
  pivot_wider(names_from = "effect",values_from = .value) %>% 
  mutate(
    cn = Intercept,
    kr = Intercept + conditionkr
  ) %>% 
  select(-c(Intercept, conditionkr)) %>% 
  pivot_longer(cols = c("cn","kr"), names_to = "condition",values_to = "post") %>% 
  mutate(post = case_when(
    par=="ra" ~ inv_logit_scaled(post),
    par=="rc" ~ inv_logit_scaled(post),
    TRUE ~ post
  ))


# Save the posterior
write_rds(Post_M3, str_glue("./figures/figures-Data/Post_{task}_M3_Intercept.rds"))


```






