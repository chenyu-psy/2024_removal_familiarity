---
title: "data_analysis"
author: "Chenyu Li"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

# 1 Initial setting

## 1.1 clear workspacce and set default color

```{r reset, include=FALSE}
graphics.off()
rm(list=ls(all.names=TRUE))
options(digits = 3)

options(ggplot2.discrete.colour= c("#2F7FC1","#FFBE7A","#8FC0A9","#8A1C56"))
options(ggplot2.discrete.fill= c("#2F7FC1","#FFBE7A","#8FC0A9","#8A1C56"))
```

## 1.2 Packages, theme setting and path

```{r primary setting, include=FALSE}

# package list
packages = c("tidyverse", "brms","ggpubr", "smartr","bmm","tidybayes","emmeans","bayestestR")
# get the package names that are not installed
missing_packages <- setdiff(packages, rownames(installed.packages()))
# install the missing packages
if (length(missing_packages) > 0) install.packages(missing_packages)
# library package
suppressMessages(sapply(packages, library, character.only = TRUE))


# import private functions (do not print the output)
nothing <- sapply(list.files("./functions", pattern = "*.R", full.names = TRUE), source)

# theme
theme_set(theme_bw())
dodge1 = position_dodge(.1)
dodge2 = position_dodge(.2)
dodge3 = position_dodge(.3)
dodge4 = position_dodge(.4)

# task name
task <- "Exp2"
model_path <- str_glue("./models/Model-{task}/Models/")
sample_path <- str_glue("./models/Model-{task}/Sample/")
figure_path <- str_glue("./figures/figures-{task}/")
log_path <- "./models/"
bf_path = "./models/BayesFactor/"

# check whether the folders are existent or not. If not, create a new one
dir.create(file.path(model_path), showWarnings = FALSE)
dir.create(file.path(sample_path), showWarnings = FALSE)
dir.create(file.path(figure_path), showWarnings = FALSE)

```


# 2 Data processing

## 2.1 Import data

```{r}

# Import Response data
Raw_Res <- read_csv("./data/Data_Exp2_Res.csv")

# Category and count response
Data_Res <- Raw_Res %>% 
  filter(screenID == "retrieval") %>% 
  mutate(
    participant = factor(participant)) %>% 
  classifyRes(groupLevel = c("participant", "block", "trial")) %>% 
  mutate(
    order = dense_rank(interaction(block,trial,lex.order=T)),
    .by = "participant"
  )

# Import Survey data
Data_Survey <- read_csv("./data/Data_Exp2_Survey.csv")

```

## 2.2 Data cleaning

```{r}

excluding_list = Data_Survey %>% 
  filter(str_detect(attention,"是"), korean_question != "从未") %>% 
  pull(participant)

Data_Res <- Data_Res %>% 
  filter(
    !participant %in% excluding_list
    )

str_glue("{length(excluding_list)} participants are excluded from the analysis.") %>% message()


```

## 2.3 Create a table for the number of options

```{r}

# Create a table for the number of options
Table_nOptions <- data.frame(
  updPos = c("yes","no")) %>% 
  mutate(nCorrect = 1,
         nTransOld = ifelse(updPos=="yes" , 3, 2),
         nTransNew = case_when(
           updPos=="yes" ~ 2,
           updPos=="no" ~ 3),
         nOutSame = ifelse(updPos=="yes", 1, 1e-4),
         nOutOther = case_when(
           updPos=="yes" ~ 2, 
           updPos=="no" ~ 3),
         nNPL = 6)

# Re-frame the table
Columns_nOptions <- Table_nOptions %>% 
  pivot_longer(cols = starts_with("n"), names_to ="response", values_to = "nOpt") %>% 
  mutate(response = substring(response, 2))

# Save it for drawing the figure
write_csv(Columns_nOptions, str_glue("./figures/figures-Data/Data_{task}_nOptions.csv"))
```

# 3 Data visualization

## 3.1 Data and data transform

```{r}

Table_response <- Data_Res %>% 
  mutate(miniblock = (order-1)%/%8) %>%
  select(
    participant, miniblock, ends_with("New"), 
    ends_with("Old"), starts_with("Out"), NPL, NoRes) %>% 
  pivot_longer(
    cols = c(ends_with("New"), ends_with("Old"), starts_with("Out"),NPL, NoRes), 
    names_to = "response", values_to = "value") %>% 
  summarySE(DV = value, within = c("miniblock"), between = c("response"), group = "participant") %>% 
  mutate( 
    # correct block ID
    miniblock = miniblock+1,
    # correct error bar
    upper = ifelse(abs(mean) < 1e-5, 0, mean + ci),
    lower = ifelse(abs(mean) < 1e-5, 0, mean - ci)) %>% 
  select(!c(ci,se,n))

```


## 3.2 Plot


### 3.2.1 Correct
```{r}
(
  Plot_Res_Correct <- Table_response %>% 
    filter(str_detect(response,"Correct")) %>%
    mutate(
      response = factor(
        response, 
        levels = c("CorrectOld","CorrectNew"), 
        labels = c("Origianl items","New items"))
    ) %>% 
    ggplot(aes(x = factor(miniblock), y = mean, group=response, color = response))+
    geom_point(position = dodge2)+
    geom_line(position = dodge2)+
    geom_errorbar(aes(ymax = upper, ymin = lower),position = dodge2, width = 0.1)+
    # ylim(0.3,0.75)+
    labs(
      x = "Block", y = "Proportion of correct", 
      title = "Correct",
      color = "Item type")+
    theme(
      # legend.position = "None",
      title = element_text(size = 11),
      axis.text = element_text(size = 10.5))
)

ggsave(
  plot = Plot_Res_Correct,
  path = figure_path,
  filename = "Plot_Res_Correct.pdf",
  width = 6.5, height = 5
)


```


### 3.2.2 Transpositions
```{r}
(
  Plot_Res_Trans <- Table_response %>% 
    filter(str_detect(response,"Trans")) %>%
    mutate(
      response = factor(
        response, 
        levels = c("TransOld","TransNew"), 
        labels = c("Origianl items","New items"))
    ) %>% 
    ggplot(aes(x = miniblock, y = mean, color = response))+
    geom_point(position = dodge2)+
    geom_line(position = dodge2)+
    geom_errorbar(
      aes(ymax = upper, ymin = lower),
      position = dodge2, 
      width = 0.1)+
    ylim(0,0.2)+
    labs(
      x = "Block", y = "Proportion of correct", 
      title = "Transposition",
      color = "Item type")+
    theme(
      # legend.position = "None",
      title = element_text(size = 11),
      axis.text = element_text(size = 10.5))
)

ggsave(
  plot = Plot_Res_Trans,
  path = figure_path,
  filename = "Plot_Res_Trans.pdf",
  width = 6.5, height = 5
)

```


### 3.2.3 Outdated items
```{r}
(
  Plot_Res_Outdated <- Table_response %>% 
    filter(str_detect(response,"Out")) %>%
    mutate(
      response = factor(
        response, 
        levels = c("OutSame","OutOther"), 
        labels = c("Original position","Other positions"))
    ) %>% 
    ggplot(aes(x = miniblock, y = mean, color = response))+
    geom_point(position = dodge2)+
    geom_line(position = dodge2)+
    geom_errorbar(aes(ymax = upper, ymin = lower),position = dodge2, width = 0.1)+
    ylim(0,0.2)+
    scale_color_manual(values = c("#8FC0A9","#8A1C56"))+
    labs(
      x = "", y = "Proportion of response", 
      title = "Outdated items")+
    theme(
      # legend.position = "None",
      axis.title = element_blank(),
      title = element_text(size = 11),
      axis.text = element_text(size = 10.5))
)

ggsave(
  plot = Plot_Res_Outdated,
  path = figure_path,
  filename = "Plot_Res_Outdated.pdf",
  width = 6.5, height = 5
)

```

### 3.2.4 NPL
```{r}
(
  Plot_Res_NPL <- Table_response %>% 
    filter(str_detect(response,"NPL")) %>%
    ggplot(aes(x = miniblock, y = mean, color = response))+
    geom_point()+
    geom_line()+
    geom_errorbar(aes(ymax = upper, ymin = lower),position = dodge1, width = 0.1)+
    ylim(0,0.3)+
    labs(
      x = "", y = "Proportion of response", 
      title = "NPL")+
    theme(
      legend.position = "None",
      title = element_text(size = 11),
      axis.text = element_text(size = 10.5))
)

ggsave(
  plot = Plot_Res_NPL,
  path = figure_path,
  filename = "Plot_Res_NPL.pdf",
  width = 6.5, height = 5
)


```

### 3.2.5 Combined
```{r}

Plot_Res_combined <- ggpubr::ggarrange(
  Plot_Res_Correct, Plot_Res_Trans, Plot_Res_Outdated, Plot_Res_NPL,
  ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")


```


# Model fit

## Learning effect

### Data and data transform

```{r}

# Data -------------------------------------------------------------------------

mData_Res <- Data_Res %>% 
  pivot_longer(
    cols = c(CorrectNew, CorrectOld, TransNew, TransOld, OutSame, OutOther, NPL),
    names_to = "category",
    values_to = "value"
  ) %>%
  summarize(
    Resp = sum(value, na.rm = TRUE),
    nResp = sum(!is.na(value)),
    .by = c(participant, block, category)
  ) %>% 
  mutate(
    itemType = case_when(
      str_detect(category, "Old") ~ "Original",
      str_detect(category, "New") ~ "New",
      str_detect(category, "Out") ~ "Outdated",
      TRUE ~ "NPL"),
    response = case_when(
      str_detect(category, "Correct|Same") ~ "correct",
      TRUE ~ "incorrect"),
    t = block - 1
    )

# Arguments --------------------------------------------------------------------

Args_response <- list(
  formula = Resp | trials(nResp) ~ 1 + itemType*t + (1 + itemType*t || participant),
  family = binomial(),
  prior = c(prior(normal(0,1), class = "b"), 
            prior(student_t(3, 0, 2), class = "sd", lb = 0)),
  chains = 8,
  iter = 10000,
  warmup = 2500,
  cores = 8,
  control = list(adapt_delta = 0.95, max_treedepth = 15),
  save_pars = save_pars(all = TRUE)
)

```

### Correct responses

```{r}

mData_Res_Correct <- mData_Res %>% 
  filter(response == "correct",itemType %in% c("Original","New")) %>% 
  mutate(itemType = factor(itemType))

contrasts(mData_Res_Correct$itemType) = bayestestR::contr.equalprior(n = 2)

smart_runFun(
  fun = brm,
  args = Args_response %>% append(list(
      data = mData_Res_Correct,
      file = str_glue("{model_path}Model_{task}_Correct.rds"))),
  untilFinished = FALSE,
  name = "Model_Exp2_Correct",
)


Model_Correct <- readRDS(str_glue("{model_path}Model_{task}_Correct.rds"))
smart_runFun(
  fun = unupdate,
  args = list(model = Model_Correct),
  untilFinished = TRUE,
  export = "Prior_Correct"
)
bf_parameters(Model_Correct, Prior_Correct)



'
Parameter   |     BF
--------------------
(Intercept) |  0.053
itemType1   | 620.71 # main effect of the item type
t           | 115.21 # main effect of the block (leanring effect)
itemType1:t |  0.058 # interaction
'


```


## 4 Memory Measurement Model

### 4.1 Data and data transform

```{r}

mData_M3 <- Data_Res %>% 
  tidy_M3(
    responses = c("Correct", "TransOld", "TransNew", "OutSame", "OutOther", "NPL"),
    group = c("participant", "updPos", "block"),
    DV_name = "y",
    nDV_name = "nRet",
    DV_numerical = TRUE
  ) %>% 
  left_join(Table_nOptions, by = "updPos") %>% 
  mutate(
    t = block - 1,
    iP = ifelse(updPos == "yes", 1, 0)
  )

mData_M3_con <- Data_Res %>% 
  mutate(condition = case_when(
    order <= 10 ~ "unfamiliar",
    order > 30 ~ "familiar",
    TRUE ~ NA
  )) %>% 
  filter(!is.na(condition)) %>% 
  tidy_M3(
    responses = c("Correct", "TransOld", "TransNew", "OutSame", "OutOther", "NPL"),
    group = c("participant", "updPos", "condition"),
    DV_name = "y",
    nDV_name = "nRet",
    DV_numerical = TRUE
  ) %>% 
  left_join(Table_nOptions, by = "updPos") %>% 
  mutate(
    condition = factor(condition),
    iP = ifelse(updPos == "yes", 1, 0)
  )

```


### 4.2 Function

```{r}

genM3Form <- function(choice_rule="softmax", model = "condition") {
  
  if (choice_rule=="softmax") {
    
    if (model == "condition") {
      M3_formula <- bf(
        y | trials(nRet) ~ Correct + log(nCorrect),
        nlf(mu2 ~ TransOld + log(nTransOld)),
        nlf(mu3 ~ TransNew + log(nTransNew)),
        nlf(mu4 ~ OutSame + log(nOutSame)),
        nlf(mu5 ~ OutOther + log(nOutOther)),
        nlf(mu6 ~ NPL + log(nNPL)),
        nlf(Correct ~ (1-iP)*(a1 + c1) + iP*(a2 + c2) + b),
        nlf(TransOld ~ a1 + b),
        nlf(TransNew ~ a2 + b),
        nlf(OutSame ~ iP*(inv_logit(ra)*a1 + inv_logit(rc)*c1 + b) + (1-iP)*(-100)),
        nlf(OutOther ~ inv_logit(ra)*a1 + b),
        nlf(NPL ~ b),
        a1 ~ 0 + condition + (0 + condition || participant),
        c1 ~ 0 + condition + (0 + condition || participant),
        a2 ~ 0 + condition + (0 + condition || participant),
        c2 ~ 0 + condition + (0 + condition || participant),
        ra ~ 0 + condition + (0 + condition || participant),
        rc ~ 0 + condition + (0 + condition || participant),
        b ~ 0 + condition,
        nl = TRUE
      )
    } else {
      
      M3_formula <- bf(
        y | trials(nRet) ~ Correct + log(nCorrect),
        nlf(mu2 ~ TransOld + log(nTransOld)),
        nlf(mu3 ~ TransNew + log(nTransNew)),
        nlf(mu4 ~ OutSame + log(nOutSame)),
        nlf(mu5 ~ OutOther + log(nOutOther)),
        nlf(mu6 ~ NPL + log(nNPL)),
        nlf(Correct ~ (1-iP)*(a + c1) + iP*(a + c2) + b),
        nlf(TransOld ~ a + b),
        nlf(TransNew ~ a + b),
        nlf(OutSame ~ iP*(ra*a + rc*c1 + b) + (1-iP)*(-100)),
        nlf(OutOther ~ ra*a + b),
        nlf(NPL ~ b),
        nlf(a ~ ya + ba*t),
        nlf(c1 ~ yc1 + bc1*t),
        nlf(c2 ~ yc2 + bc2*t),
        nlf(ra ~ inv_logit(yra + bra*t)),
        nlf(rc ~ inv_logit(yrc + brc*t)),
        nlf(b ~ bb*t),
        ya ~ 1 + (1 || participant),
        ba ~ 1 + (1 || participant),
        yc1 ~ 1 + (1 || participant),
        bc1 ~ 1 + (1 || participant),
        yc2 ~ 1 + (1 || participant),
        bc2 ~ 1 + (1 || participant),
        yra ~ 1 + (1 || participant),
        bra ~ 1 + (1 || participant),
        yrc ~ 1 + (1 || participant),
        brc ~ 1 + (1 || participant),
        bb ~ 1,
        nl = TRUE
    )
      
    }
    
    
  } else {
    
    if (model == "condition") {
      M3_formula <- bf(
        y | trials(nRet) ~ log(Correct*nCorrect),
        nlf(mu2 ~ log(TransOld*nTransOld)),
        nlf(mu3 ~ log(TransNew*nTransNew)),
        nlf(mu4 ~ log(OutSame*nOutSame)),
        nlf(mu5 ~ log(OutOther*nOutOther)),
        nlf(mu6 ~ log(NPL*nNPL)),
        nlf(Correct ~ (1-iP)*(exp(a1) + exp(c1)) + iP*(exp(a2) + exp(c2)) + b),
        nlf(TransOld ~ exp(a1) + b),
        nlf(TransNew ~ exp(a2) + b),
        nlf(OutSame ~ iP*(inv_logit(ra)*exp(a1) + inv_logit(rc)*exp(c1) + b) + (iP-1)*exp(-100)),
        nlf(OutOther ~ inv_logit(ra)*exp(a1) + b),
        nlf(NPL ~ b),
        a1 ~ 0 + condition + (0 + condition || participant),
        c1 ~ 0 + condition + (0 + condition || participant),
        a2 ~ 0 + condition + (0 + condition || participant),
        c2 ~ 0 + condition + (0 + condition || participant),
        ra ~ 0 + condition + (0 + condition || participant),
        rc ~ 0 + condition + (0 + condition || participant),
        b ~ 1,
        nl = TRUE
      )
      
    } else {
      M3_formula <- bf(
        y | trials(nRet) ~ log(Correct*nCorrect),
        nlf(mu2 ~ log(TransOld*nTransOld)),
        nlf(mu3 ~ log(TransNew*nTransNew)),
        nlf(mu4 ~ log(OutSame*nOutSame)),
        nlf(mu5 ~ log(OutOther*nOutOther)),
        nlf(mu6 ~ log(NPL*nNPL)),
        nlf(Correct ~ (1-iP)*(a + c1) + iP*(a + c2) + b),
        nlf(TransOld ~ a + b),
        nlf(TransNew ~ a + b),
        nlf(OutSame ~ iP*(ra*a + rc*c1 + b)+ (iP-1)*exp(-100)),
        nlf(OutOther ~ ra*a + b),
        nlf(NPL ~ b),
        nlf(a ~ exp(ya) + exp(ba)*t),
        nlf(c1 ~ exp(yc1) + exp(bc1)*t),
        nlf(c2 ~ exp(yc2) + exp(bc2)*t),
        nlf(ra ~ inv_logit(yra + bra*t)),
        nlf(rc ~ inv_logit(yrc + brc*t)),
        ya ~ 1 + (1 || participant),
        ba ~ 1 + (1 || participant),
        yc1 ~ 1 + (1 || participant),
        bc1 ~ 1 + (1 || participant),
        yc2 ~ 1 + (1 || participant),
        bc2 ~ 1 + (1 || participant),
        yra ~ 1 + (1 || participant),
        bra ~ 1 + (1 || participant),
        yrc ~ 1 + (1 || participant),
        brc ~ 1 + (1 || participant),
        b ~ 1,
        nl = TRUE
      )
    }
    
  }
  
  return (M3_formula)
}

genM3Prior <- function(choice_rule="softmax", model = "condition") {
  
  if (choice_rule=="softmax") {
    if (model == "condition") {
      M3_prior <- c(
        prior(normal(3,1), class = "b", nlpar = "a1", lb = 0), 
        prior(normal(3,1), class = "b", nlpar = "a2", lb = 0), 
        prior(normal(3,1), class = "b", nlpar = "c1", lb = 0),
        prior(normal(3,1), class = "b", nlpar = "c2", lb = 0),
        prior(logistic(0,1), class = "b", nlpar = "ra"),
        prior(logistic(0,1), class = "b", nlpar = "rc"),
        prior(constant(0), class = "b", nlpar = "b", coef = "conditionunfamiliar"),
        prior(constant(1), class = "b", nlpar = "b", coef = "conditionfamiliar")
        )
    } else {
      M3_prior <- c(
        prior(normal(3,1), class = "b", nlpar = "ya"),
        prior(normal(0,0.5), class = "b", nlpar = "ba"),
        prior(normal(3,1), class = "b", nlpar = "yc1"),
        prior(normal(0,0.5), class = "b", nlpar = "bc1"),
        prior(normal(3,1), class = "b", nlpar = "yc2"),
        prior(normal(0,0.5), class = "b", nlpar = "bc2"),
        prior(logistic(0,1), class = "b", nlpar = "yra"),
        prior(normal(0,1), class = "b", nlpar = "bra"),
        prior(logistic(0,1), class = "b", nlpar = "yrc"),
        prior(normal(0,1), class = "b", nlpar = "brc"),
        prior(constant(0.1), class = "b", nlpar = "bb")
      )
    }
    
  } else {
    if (model=="condition") {
      M3_prior <- c(
        prior(normal(1.5,0.5), class = "b", nlpar = "a1"), 
        prior(normal(1.5,0.5), class = "b", nlpar = "c1"),
        prior(normal(1.5,0.5), class = "b", nlpar = "a2"),
        prior(normal(1.5,0.5), class = "b", nlpar = "c2"),
        prior(normal(1.5,0.5), class = "b", nlpar = "ra"),
        prior(normal(1.5,0.5), class = "b", nlpar = "rc"),
        prior(constant(0.1), class = "b", nlpar = "b")
      )
    } else {
      M3_prior <- c(
        prior(normal(1, 0.5), class = "b", nlpar = "ya"),
        prior(normal(-1,0.5), class = "b", nlpar = "ba"),
        prior(normal(1, 0.5), class = "b", nlpar = "yc1"),
        prior(normal(-1,0.5), class = "b", nlpar = "bc1"),
        prior(normal(1, 0.5), class = "b", nlpar = "yc2"),
        prior(normal(-1,0.5), class = "b", nlpar = "bc2"),
        prior(normal(0,1), class = "b", nlpar = "yra"),
        prior(normal(0,1), class = "b", nlpar = "bra"),
        prior(normal(0,1), class = "b", nlpar = "yrc"),
        prior(normal(0,1), class = "b", nlpar = "brc"),
        prior(constant(0), class = "b", nlpar = "b")
      )
    }
    
  }
  
  return (M3_prior)
}

```


### 4.3 Model comparison

```{r}

# softmax

smart_runFun(
  fun = brm,
  args = list(
    formula = genM3Form(choice_rule = "softmax", model = "condition"),
    data = mData_M3_con,
    family = multinomial(refcat = NA),
    prior = genM3Prior(choice_rule = "softmax", model = "condition"),
    chains = 8,
    cores = 8,
    iter = 10000,
    warmup = 2500,
    control = list(adapt_delta = 0.98),
    save_pars = save_pars(all = TRUE),
    sample_prior = "yes",
    init = 0,
    file = paste0(model_path, "Model_Exp2_M3_Softmax_condition")
    ),
  name = "Model_Exp2_M3_Softmax_condition"
)

smart_runFun(
  fun = brm,
  args = list(
    formula = genM3Form(choice_rule = "softmax", model = "nonlinear"),
    data = mData_M3,
    family = multinomial(refcat = NA),
    prior = genM3Prior(choice_rule = "softmax", model = "nonlinear"),
    chains = 8,
    cores = 8,
    iter = 10000,
    warmup = 2500,
    control = list(adapt_delta = 0.98),
    save_pars = save_pars(all = TRUE),
    sample_prior = "yes",
    init = 0,
    file = paste0(model_path, "Model_Exp2_M3_Softmax_nonlinear_a_bt")
    ),
  name = "Model_Exp2_M3_Softmax_nonlinear_a_bt"
)


```


### 4.4 Bayes factor
```{r}

Model_M3 <- read_rds(str_glue("{model_path}Model_{task}_M3_Softmax_condition.rds"))

Hypothesis <- hypothesis(Model_M3, c(
  a1 = "a1_conditionfamiliar = a1_conditionunfamiliar",
  c1 = "c1_conditionfamiliar = c1_conditionunfamiliar",
  a2 = "a2_conditionfamiliar = a2_conditionunfamiliar",
  c2 = "c2_conditionfamiliar = c2_conditionunfamiliar",
  ra = "ra_conditionfamiliar = ra_conditionunfamiliar",
  rc = "rc_conditionfamiliar = rc_conditionunfamiliar"
))

Hypothesis$hypothesis %>% mutate(Evid.Ratio = 1/Evid.Ratio)

plot(Hypothesis)

'
  Hypothesis Estimate Est.Error CI.Lower CI.Upper Evid.Ratio Post.Prob Star
1         a1   -0.144     0.120   -0.368   0.0974      0.177    0.8496     
2         c1    0.512     0.320   -0.113   1.1430      0.837    0.5444     
3         a2   -0.178     0.121   -0.414   0.0622      0.245    0.8035     
4         c2    0.751     0.236    0.288   1.2169     27.889    0.0346    *
5         ra    0.650     2.206   -3.744   5.1226      0.878    0.5323     
6         rc   -0.840     0.638   -2.303   0.2470      0.683    0.5943     
'


```


### 4.5 Posterior

```{r}

# The original model
Model_M3 <- read_rds(str_glue("{model_path}Model_Exp2_M3_Softmax_nonlinear_a.rds"))

Post_M3 <- Model_M3 %>% 
  gather_draws(`b_.*`, regex = TRUE) %>% 
  separate_wider_delim(.variable, "_", names = c(NA, "par", NA), cols_remove = TRUE) %>% 
  rename(post = .value)

# Save the posterior
write_rds(Post_M3, str_glue("./figures/figures-Data/Post_{task}_M3_nonlinear.rds"))

# condition --------------------------------------------------------------------

Model_M3 <- read_rds(str_glue("{model_path}Model_{task}_M3_Softmax_condition.rds"))

Post_M3 <- Model_M3 %>% 
  extractPost("condition", par_name = "M3_par") %>% 
  filter(!is.na(post), M3_par!="b") %>% 
  pivot_wider(names_from = M3_par, values_from = post) %>% 
  filter(!is.na(condition)) %>% 
  rowwise() %>% 
  mutate(
    a2 = ifelse("a2" %in% names(.), a2, a1),
    ra = ifelse("ra" %in% names(.), inv_logit_scaled(ra), 1),
    rc = ifelse("rc" %in% names(.), inv_logit_scaled(rc), 1)
    ) %>% 
  ungroup() %>% 
  select(.chain, .iteration, .draw, condition, a1, a2, c1, c2, ra, rc)

# Save the posterior
write_rds(Post_M3, str_glue("./figures/figures-Data/Post_{task}_M3_condition.rds"))


```






